{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","components/PokemonsArray.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","_this$props$data","this","props","data","name","types","url","isFavorite","react_default","a","createElement","className","concat","data-index","index","onClick","selector","src","alt","map","item","key","React","Component","PokeList","_this","id","components_Pokemon","protoTypes","PropTypes","arrayOf","shape","number","string","isRequired","func","pokemon","evolution","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pokemons","clickHandler","bind","assertThisInitialized","event","currentTarget","getAttribute","allpokemons","splice","setState","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.511b7018.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/Pokemon.scss\";\n\nclass Pokemon extends React.Component {\n  render() {\n      const {name, types, url, isFavorite}=this.props.data;\n    return (\n      <div\n        className={`Pokemon ${isFavorite}`}\n        data-index={this.props.index}\n        onClick={this.props.selector}\n      >\n        <img src={url} alt={name} />\n        <h2 className=\"Name\">{name}</h2>\n        <ul className=\"ListType\">\n          {types.map((item, index) => {\n            return (\n              <li className=\"Type\" key={index}>\n                {item}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nPokemon.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    isFavorite: PropTypes.string,\n    types: PropTypes.arrayOf(PropTypes.string),\n    url: PropTypes.string\n  }).isRequired,\n  index: PropTypes.number,\n  selector: PropTypes.func.isRequired,\n};\n\nexport default Pokemon;\n","import React from \"react\";\nimport Pokemon from \"./Pokemon\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/PokeList.scss\";\n\nclass PokeList extends React.Component {\n  render() {\n    return (\n      <ul className=\"PokemonUl\">\n        {this.props.data.map((item, index) => {\n          return (\n            <li key={item.id}>\n              <Pokemon data={item} index={index} selector={this.props.selector}/>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nPokeList.protoTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      isFavorite: PropTypes.string,\n      types: PropTypes.arrayOf(PropTypes.string),\n      url: PropTypes.string\n    })\n  ).isRequired,\n  selector: PropTypes.func.isRequired,\n};\n\nexport default PokeList;\n","const pokemon = [\n  {\n    id: 1,\n    name: \"bulbasaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"\n  },\n  {\n    id: 2,\n    name: \"ivysaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"bulbasaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"\n  },\n  {\n    id: 3,\n    name: \"venusaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"ivysaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"\n  },\n  {\n    id: 4,\n    name: \"charmander\",\n    types: [\"fire\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"\n  },\n  {\n    id: 5,\n    name: \"charmeleon\",\n    types: [\"fire\"],\n    evolution: \"charmander\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"\n  },\n  {\n    id: 6,\n    name: \"charizard\",\n    types: [\"flying\", \"fire\"],\n    evolution: \"charmeleon\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"\n  },\n  {\n    id: 7,\n    name: \"squirtle\",\n    types: [\"water\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"\n  },\n  {\n    id: 8,\n    name: \"wartortle\",\n    types: [\"water\"],\n    evolution: \"squirtle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"\n  },\n  {\n    id: 9,\n    name: \"blastoise\",\n    types: [\"water\"],\n    evolution: \"wartortle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"\n  },\n  {\n    id: 10,\n    name: \"caterpie\",\n    types: [\"bug\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"\n  }\n];\n\nexport { pokemon };","import React from \"react\";\nimport PokeList from \"./components/PokeList\";\nimport { pokemon } from \"./components/PokemonsArray\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      pokemons: pokemon,\n    }\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  clickHandler (event) {\n    const index = event.currentTarget.getAttribute('data-index');\n    const pokemon = this.state.pokemons[index];\n    pokemon.isFavorite==='Favorite'? pokemon.isFavorite= '': pokemon.isFavorite= 'Favorite';\n    let allpokemons = this.state.pokemons;\n    allpokemons.splice(index,1,pokemon);\n    this.setState({\n      pokemons: allpokemons, \n    });\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>Mi lista de pokemon</h1>\n        <PokeList data={this.state.pokemons} selector={this.clickHandler}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}